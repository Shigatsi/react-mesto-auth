[{"E:\\praktikum\\dev\\123\\mesto-react\\src\\components\\ImagePopup.js":"1","E:\\praktikum\\dev\\123\\mesto-react\\src\\components\\Register.js":"2","E:\\praktikum\\dev\\123\\mesto-react\\src\\components\\Card.js":"3","E:\\praktikum\\dev\\123\\mesto-react\\src\\mestoAuth.js":"4","E:\\praktikum\\dev\\123\\mesto-react\\src\\components\\App.js":"5","E:\\praktikum\\dev\\123\\mesto-react\\src\\utils\\Api.js":"6","E:\\praktikum\\dev\\123\\mesto-react\\src\\components\\InfoTooltip.js":"7","E:\\praktikum\\dev\\123\\mesto-react\\src\\contexts\\CurrentUserContext.js":"8","E:\\praktikum\\dev\\123\\mesto-react\\src\\components\\ProtectedRoute.js":"9"},{"size":638,"mtime":1613153780369,"results":"10","hashOfConfig":"11"},{"size":1871,"mtime":1613645838948,"results":"12","hashOfConfig":"11"},{"size":2388,"mtime":1613153780355,"results":"13","hashOfConfig":"11"},{"size":716,"mtime":1613636431641,"results":"14","hashOfConfig":"11"},{"size":7914,"mtime":1613655267651,"results":"15","hashOfConfig":"11"},{"size":3453,"mtime":1613153780431,"results":"16","hashOfConfig":"11"},{"size":1068,"mtime":1613650188929,"results":"17","hashOfConfig":"11"},{"size":88,"mtime":1613153780375,"results":"18","hashOfConfig":"11"},{"size":407,"mtime":1613637935481,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"bqlczw",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\praktikum\\dev\\123\\mesto-react\\src\\components\\ImagePopup.js",[],"E:\\praktikum\\dev\\123\\mesto-react\\src\\components\\Register.js",[],"E:\\praktikum\\dev\\123\\mesto-react\\src\\components\\Card.js",[],"E:\\praktikum\\dev\\123\\mesto-react\\src\\mestoAuth.js",[],"E:\\praktikum\\dev\\123\\mesto-react\\src\\components\\App.js",["39","40","41","42","43","44"],"import React from 'react';\r\nimport { Switch, Route, Redirect, useHistory } from 'react-router-dom';\r\n//импорт компонентов\r\nimport Header from './Header';\r\nimport Main from './Main';\r\nimport EditProfilePopup from './EditProfilePopup';\r\nimport EditAvatarPopup from './EditAvatarPopup';\r\nimport AddPlacePopup from './AddPlacePopup';\r\nimport PopupWithForm from './PopupWithForm';\r\nimport ImagePopup from './ImagePopup';\r\nimport Footer from './Footer';\r\nimport api from '../utils/Api';\r\nimport {CurrentUserContext} from '../contexts/CurrentUserContext';\r\nimport Login from './Login';\r\nimport Register from './Register';\r\nimport ProtectedRoute from \"./ProtectedRoute\";\r\nimport InfoTooltip from './InfoTooltip';\r\nimport * as mestoAuth from '../mestoAuth';\r\n\r\nfunction App() {\r\n  const history = useHistory();\r\n  const [loggedIn, setLoggedIn] = React.useState(false);\r\n  const [userEmail, setUserEmail] = React.useState('');\r\n  const [succes, isSucces] = React.useState(false);\r\n  React.useEffect(() => {\r\n    tockenCheck();\r\n  }, []);\r\n\r\n  // React.useEffect(() => {\r\n  //   tockenCheck();\r\n  // }, [loggedIn]);\r\n\r\n    const handleLogin = () => {\r\n    setLoggedIn(true);\r\n  }\r\n\r\n  const handleRegister= (data) => {\r\n    const {email,password} =data;\r\n     mestoAuth.register(email, password)\r\n    .then(()=>{\r\n      setIsInfoTooltipOpen(true);\r\n      isSucces(true);\r\n      history.push('/sign-in');\r\n    })\r\n    .catch(()=>{\r\n      isSucces(false);\r\n      setIsInfoTooltipOpen(true);\r\n    })\r\n  }\r\n\r\n  const tockenCheck =()=> {\r\n\r\n    if (localStorage.getItem('jwt')) {\r\n      let jwt = localStorage.getItem('jwt');\r\n      console.log(localStorage.getItem('jwt'));\r\n    }\r\n  }\r\n\r\n\r\n  const [cards, setCards] = React.useState([]);\r\n\r\n  React.useEffect(()=>{\r\n    api.getInitialCards()\r\n    .then((Cards)=>{\r\n      const cards = Cards.map(item =>{\r\n        return{\r\n          cardId:item._id,\r\n          userId:item.owner._id,\r\n          src:item.link,\r\n          title:item.name,\r\n          likes:item.likes,\r\n          alt: item.name}\r\n      })\r\n      setCards(cards);\r\n\r\n    })\r\n    .catch(err => console.error(err));\r\n  }, [])\r\n\r\n  function handleCardLike(card) {\r\n    // Снова проверяем, есть ли уже лайк на этой карточке\r\n    const isLiked = card.likes.some(i => i._id === currentUser._id);\r\n    // Отправляем запрос в API и получаем обновлённые данные карточки\r\n    api.changeLikeCardStatus(card.cardId, !isLiked)\r\n    .then((item) => {\r\n      const newCard = {\r\n        cardId:item._id,\r\n        userId:item.owner._id,\r\n        src:item.link,\r\n        title:item.name,\r\n        likes:item.likes,\r\n        alt: item.name\r\n      }\r\n        // Формируем новый массив на основе имеющегося, подставляя в него новую карточку\r\n        const newCards = cards.map((c) => c.cardId === card.cardId ? newCard : c);\r\n      // Обновляем стейт\r\n      setCards(newCards)\r\n    })\r\n    .catch(err => console.error(err));//выведем ошибку;\r\n  }\r\n\r\n\r\n  function handleCardDelete(card){\r\n  api.deleteCard(card.cardId)\r\n  .then(()=>{\r\n    // Формируем новый массив на основе имеющегося, удоляя карточку\r\n    const newCards = cards.filter(с=>{return с.cardId!==card.cardId});\r\n    // Обновляем стейт\r\n    setCards(newCards)\r\n  })\r\n  .catch(err => console.error(err));//выведем ошибку\r\n  }\r\n\r\n  const [currentUser, setCurrentUser] = React.useState({});\r\n  const [EditProfilePopupOpen, setIsEditProfilePopupOpen] = React.useState(false);\r\n  const  [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = React.useState(false);\r\n  const  [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = React.useState(false);\r\n  const [isInfoTooltipOpen, setIsInfoTooltipOpen] = React.useState (false);\r\n\r\n  React.useEffect(()=>{\r\n    api.getUserData()\r\n    .then((userData)=>{\r\n      setCurrentUser(userData);\r\n    })\r\n    .catch(err => console.error(err));//выведем ошибку\r\n  }, [])\r\n\r\n  function closeAllPopups () {\r\n    setIsAddPlacePopupOpen(false);\r\n    setIsEditAvatarPopupOpen(false);\r\n    setIsEditProfilePopupOpen(false);\r\n    setSelectedCard({});\r\n    setIsInfoTooltipOpen(false);\r\n  }\r\n\r\n   function handleEditPlaceClick () {\r\n    setIsAddPlacePopupOpen(true);\r\n  }\r\n\r\n  function handleEditAvatarClick () {\r\n    setIsEditAvatarPopupOpen(true);\r\n   }\r\n\r\n   function handleEditProfileClick () {\r\n     setIsEditProfilePopupOpen(true);\r\n  }\r\n\r\n  const [selectedCard, setSelectedCard] = React.useState({});\r\n  function handleCardClick (card) {\r\n    setSelectedCard(card);\r\n  }\r\n\r\n\r\n  function handleUpdateUser (currentUser) {\r\n    api.patchUserInfo(currentUser)\r\n    .then((updateUserInfo)=>{\r\n      setCurrentUser(updateUserInfo);\r\n      closeAllPopups();\r\n    })\r\n    .catch(err => console.error(err));//выведем ошибку\r\n\r\n  }\r\n\r\n\r\n  function handleUpdateAvatar (avatarUrl) {\r\n    api.patchUserAvatar(avatarUrl)\r\n    .then((userData)=>{\r\n      setCurrentUser(userData)\r\n      closeAllPopups ();\r\n    })\r\n    .catch(err => console.error(err));//выведем ошибку\r\n  }\r\n\r\n\r\n  function handleAddPlaceSubmit (popupData) {\r\n    api.postNewCadr(popupData)\r\n    .then((item)=>{\r\n      const newCard = {\r\n        cardId:item._id,\r\n        userId:item.owner._id,\r\n        src:item.link,\r\n        title:item.name,\r\n        likes:item.likes,\r\n        alt: item.name\r\n      }\r\n      setCards([newCard, ...cards]);\r\n      closeAllPopups ();\r\n    })\r\n    .catch(err => console.error(err));//выведем ошибку\r\n\r\n  }\r\n\r\n  function handleInfoTooltipOpen() {\r\n    setIsInfoTooltipOpen(true);\r\n  }\r\n\r\n  return (\r\n    <CurrentUserContext.Provider value = {currentUser}>\r\n      <div className=\"page\">\r\n        <Header/>\r\n        <Switch>\r\n\r\n          {/* роут для регистрации пользователя */}\r\n          <Route path='/sign-up'>\r\n            <Register\r\n              onRegister = {handleRegister}\r\n            />\r\n          </Route>\r\n          {/* роут для авторизации пользователя */}\r\n          <Route path='/sign-in'>\r\n            <Login />\r\n          </Route>\r\n          <ProtectedRoute path = '/'> {\r\n              <Main\r\n                cards = {cards}\r\n                onCardLike = {handleCardLike}\r\n                onCardDelete = {handleCardDelete}\r\n                onEditProfile = {handleEditProfileClick}\r\n                onAddPlace = {handleEditPlaceClick}\r\n                onEditAvatar = {handleEditAvatarClick}\r\n                setSelectedCard = {handleCardClick}\r\n                loggedIn = {loggedIn}\r\n              />\r\n            }\r\n          </ProtectedRoute>\r\n        </Switch>\r\n\r\n        <EditProfilePopup\r\n          isOpen={EditProfilePopupOpen}\r\n          onClose={closeAllPopups}\r\n          onUpdateUser={handleUpdateUser}\r\n        />\r\n\r\n        <EditAvatarPopup\r\n          isOpen={isEditAvatarPopupOpen}\r\n          onClose={closeAllPopups}\r\n          onUpdateAvatar={handleUpdateAvatar}\r\n        />\r\n\r\n        <AddPlacePopup\r\n          isOpen={isAddPlacePopupOpen}\r\n          onClose = {closeAllPopups}\r\n          onAddPlace = {handleAddPlaceSubmit}\r\n        />\r\n\r\n        <PopupWithForm\r\n          name = \"confirm\"\r\n          title=\"Вы уверены?\"\r\n          submited = \"Да\"\r\n          isOpen={false}\r\n          onClose = {closeAllPopups}\r\n        >\r\n        </PopupWithForm>\r\n\r\n        <ImagePopup setSelectedCard={handleCardClick} card = {selectedCard || ''} onClose = {closeAllPopups}/>\r\n        <InfoTooltip\r\n          isOpen = {isInfoTooltipOpen}\r\n          onClose = {closeAllPopups}\r\n          isSuccess= {succes}\r\n        />\r\n        { loggedIn && <Footer/>}\r\n    </div>\r\n  </CurrentUserContext.Provider>\r\n\r\n\r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n","E:\\praktikum\\dev\\123\\mesto-react\\src\\utils\\Api.js",[],"E:\\praktikum\\dev\\123\\mesto-react\\src\\components\\InfoTooltip.js",[],"E:\\praktikum\\dev\\123\\mesto-react\\src\\contexts\\CurrentUserContext.js",[],"E:\\praktikum\\dev\\123\\mesto-react\\src\\components\\ProtectedRoute.js",[],{"ruleId":"45","severity":1,"message":"46","line":2,"column":25,"nodeType":"47","messageId":"48","endLine":2,"endColumn":33},{"ruleId":"45","severity":1,"message":"49","line":23,"column":10,"nodeType":"47","messageId":"48","endLine":23,"endColumn":19},{"ruleId":"45","severity":1,"message":"50","line":23,"column":21,"nodeType":"47","messageId":"48","endLine":23,"endColumn":33},{"ruleId":"45","severity":1,"message":"51","line":33,"column":11,"nodeType":"47","messageId":"48","endLine":33,"endColumn":22},{"ruleId":"45","severity":1,"message":"52","line":54,"column":11,"nodeType":"47","messageId":"48","endLine":54,"endColumn":14},{"ruleId":"45","severity":1,"message":"53","line":193,"column":12,"nodeType":"47","messageId":"48","endLine":193,"endColumn":33},"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'userEmail' is assigned a value but never used.","'setUserEmail' is assigned a value but never used.","'handleLogin' is assigned a value but never used.","'jwt' is assigned a value but never used.","'handleInfoTooltipOpen' is defined but never used."]